// <auto-generated />
using System;
using Marketplace.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Marketplace.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241118122536_begin")]
    partial class begin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Marketplace.Data.User", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");
                b.Property<string>("Name").IsRequired().HasColumnType("text");
                b.Property<string>("Email").IsRequired().HasColumnType("text");
                b.Property<DateTime>("DataCreate").HasColumnType("timestamp with time zone");
                b.Property<DateTime>("DataUpdate").HasColumnType("timestamp with time zone");
                b.HasKey("Id");
                b.ToTable("Users");
            });

            modelBuilder.Entity("Marketplace.Data.Category", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");
                b.Property<string>("Name").IsRequired().HasColumnType("text");
                b.Property<DateTime>("DataCreate").HasColumnType("timestamp with time zone");
                b.Property<DateTime>("DataUpdate").HasColumnType("timestamp with time zone");
                b.HasKey("Id");
                b.ToTable("Categories");
            });

            modelBuilder.Entity("Marketplace.Data.Product", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");
                b.Property<string>("Name").IsRequired().HasColumnType("text");
                b.Property<string>("Description").IsRequired().HasColumnType("text");
                b.Property<decimal>("Price").HasColumnType("numeric");
                b.Property<Guid>("CategoryId").HasColumnType("uuid");
                b.Property<Guid>("SellerId").HasColumnType("uuid");
                b.Property<DateTime>("DataCreate").HasColumnType("timestamp with time zone");
                b.Property<DateTime>("DataUpdate").HasColumnType("timestamp with time zone");
                b.HasKey("Id");
                b.HasIndex("CategoryId");
                b.HasIndex("SellerId");
                b.ToTable("Products");
            });

            modelBuilder.Entity("Marketplace.Data.Characteristic", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");
                b.Property<string>("Name").IsRequired().HasColumnType("text");
                b.Property<DateTime>("DataCreate").HasColumnType("timestamp with time zone");
                b.Property<DateTime>("DataUpdate").HasColumnType("timestamp with time zone");
                b.HasKey("Id");
                b.ToTable("Characteristics");
            });

            modelBuilder.Entity("Marketplace.Data.ProductCharacteristic", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");
                b.Property<Guid>("ProductId").HasColumnType("uuid");
                b.Property<Guid>("CharacteristicId").HasColumnType("uuid");
                b.Property<string>("Value").IsRequired().HasColumnType("text");
                b.HasKey("Id");
                b.HasIndex("ProductId");
                b.HasIndex("CharacteristicId");
                b.ToTable("ProductCharacteristics");
            });

            modelBuilder.Entity("Marketplace.Data.Order", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");
                b.Property<Guid>("UserId").HasColumnType("uuid");
                b.Property<DateTime>("OrderDate").HasColumnType("timestamp with time zone");
                b.Property<DateTime>("DataCreate").HasColumnType("timestamp with time zone");
                b.Property<DateTime>("DataUpdate").HasColumnType("timestamp with time zone");
                b.HasKey("Id");
                b.HasIndex("UserId");
                b.ToTable("Orders");
            });

            modelBuilder.Entity("Marketplace.Data.OrderItem", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");
                b.Property<Guid>("OrderId").HasColumnType("uuid");
                b.Property<Guid>("ProductId").HasColumnType("uuid");
                b.Property<int>("Quantity").HasColumnType("integer");
                b.Property<decimal>("Price").HasColumnType("numeric");
                b.HasKey("Id");
                b.HasIndex("OrderId");
                b.HasIndex("ProductId");
                b.ToTable("OrderItems");
            });

            modelBuilder.Entity("Marketplace.Data.Shipment", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");
                b.Property<Guid>("OrderId").HasColumnType("uuid");
                b.Property<string>("Address").IsRequired().HasColumnType("text");
                b.Property<string>("Status").IsRequired().HasColumnType("text");
                b.Property<DateTime>("DataCreate").HasColumnType("timestamp with time zone");
                b.Property<DateTime>("DataUpdate").HasColumnType("timestamp with time zone");
                b.HasKey("Id");
                b.HasIndex("OrderId");
                b.ToTable("Shipments");
            });

            modelBuilder.Entity("Marketplace.Data.Payment", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");
                b.Property<Guid>("OrderId").HasColumnType("uuid");
                b.Property<decimal>("Amount").HasColumnType("numeric");
                b.Property<string>("Method").IsRequired().HasColumnType("text");
                b.Property<string>("Status").IsRequired().HasColumnType("text");
                b.Property<DateTime>("DataCreate").HasColumnType("timestamp with time zone");
                b.Property<DateTime>("DataUpdate").HasColumnType("timestamp with time zone");
                b.HasKey("Id");
                b.HasIndex("OrderId");
                b.ToTable("Payments");
            });

            modelBuilder.Entity("Marketplace.Data.Review", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");
                b.Property<Guid>("ProductId").HasColumnType("uuid");
                b.Property<Guid>("UserId").HasColumnType("uuid");
                b.Property<string>("Comment").IsRequired().HasColumnType("text");
                b.Property<int>("Rating").HasColumnType("integer");
                b.Property<DateTime>("DataCreate").HasColumnType("timestamp with time zone");
                b.Property<DateTime>("DataUpdate").HasColumnType("timestamp with time zone");
                b.HasKey("Id");
                b.HasIndex("ProductId");
                b.HasIndex("UserId");
                b.ToTable("Reviews");
            });

            // Навигационные связи (в виде примера — можно добавить остальные по необходимости)
            modelBuilder.Entity("Marketplace.Data.Product", b =>
            {
                b.HasOne("Marketplace.Data.Category", "Category")
                    .WithMany()
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Marketplace.Data.User", "Seller")
                    .WithMany()
                    .HasForeignKey("SellerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Category");
                b.Navigation("Seller");
            });
#pragma warning restore 612, 618
        }
    }
}