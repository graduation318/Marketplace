// <auto-generated />
using System;
using Marketplace.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Marketplace.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Marketplace.Data.User", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<DateTime>("DataCreate")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("DataUpdate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PasswordHash")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("Users");
            });

            modelBuilder.Entity("Marketplace.Data.Category", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("DataCreate")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("DataUpdate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("Categories");
            });

            modelBuilder.Entity("Marketplace.Data.Characteristic", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<Guid>("CategoryId")
                    .HasColumnType("uuid");

                b.Property<DateTime>("DataCreate")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("DataUpdate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.ToTable("Characteristics");
            });

            modelBuilder.Entity("Marketplace.Data.Product", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Description")
                    .HasColumnType("text");

                b.Property<decimal>("Price")
                    .HasColumnType("numeric");

                b.Property<Guid>("CategoryId")
                    .HasColumnType("uuid");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.Property<DateTime>("DataCreate")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("DataUpdate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("UserId");

                b.ToTable("Products");
            });

            modelBuilder.Entity("Marketplace.Data.ProductCharacteristic", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<Guid>("ProductId")
                    .HasColumnType("uuid");

                b.Property<Guid>("CharacteristicId")
                    .HasColumnType("uuid");

                b.Property<string>("Value")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("ProductId");

                b.HasIndex("CharacteristicId");

                b.ToTable("ProductCharacteristics");
            });

            modelBuilder.Entity("Marketplace.Data.Order", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.Property<DateTime>("OrderDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("DataCreate")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("DataUpdate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("Orders");
            });

            modelBuilder.Entity("Marketplace.Data.OrderItem", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<Guid>("OrderId")
                    .HasColumnType("uuid");

                b.Property<Guid>("ProductId")
                    .HasColumnType("uuid");

                b.Property<int>("Quantity")
                    .HasColumnType("integer");

                b.Property<decimal>("Price")
                    .HasColumnType("numeric");

                b.HasKey("Id");

                b.HasIndex("OrderId");

                b.HasIndex("ProductId");

                b.ToTable("OrderItems");
            });

            modelBuilder.Entity("Marketplace.Data.Shipment", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<Guid>("OrderId")
                    .HasColumnType("uuid");

                b.Property<string>("TrackingNumber")
                    .HasColumnType("text");

                b.Property<string>("Status")
                    .HasColumnType("text");

                b.Property<DateTime>("DataCreate")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("DataUpdate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("OrderId");

                b.ToTable("Shipments");
            });

            modelBuilder.Entity("Marketplace.Data.Payment", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<Guid>("OrderId")
                    .HasColumnType("uuid");

                b.Property<decimal>("Amount")
                    .HasColumnType("numeric");

                b.Property<string>("Status")
                    .HasColumnType("text");

                b.Property<DateTime>("PaidAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("DataCreate")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("DataUpdate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("OrderId");

                b.ToTable("Payments");
            });

            modelBuilder.Entity("Marketplace.Data.Review", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<Guid>("ProductId")
                    .HasColumnType("uuid");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.Property<int>("Rating")
                    .HasColumnType("integer");

                b.Property<string>("Comment")
                    .HasColumnType("text");

                b.Property<DateTime>("DataCreate")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("DataUpdate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("ProductId");

                b.HasIndex("UserId");

                b.ToTable("Reviews");
            });

            // Foreign keys
            modelBuilder.Entity("Marketplace.Data.Characteristic", b =>
            {
                b.HasOne("Marketplace.Data.Category", null)
                    .WithMany()
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Marketplace.Data.Product", b =>
            {
                b.HasOne("Marketplace.Data.Category", null)
                    .WithMany()
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("Marketplace.Data.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Marketplace.Data.ProductCharacteristic", b =>
            {
                b.HasOne("Marketplace.Data.Product", null)
                    .WithMany()
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("Marketplace.Data.Characteristic", null)
                    .WithMany()
                    .HasForeignKey("CharacteristicId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Marketplace.Data.Order", b =>
            {
                b.HasOne("Marketplace.Data.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Marketplace.Data.OrderItem", b =>
            {
                b.HasOne("Marketplace.Data.Order", null)
                    .WithMany()
                    .HasForeignKey("OrderId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("Marketplace.Data.Product", null)
                    .WithMany()
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Marketplace.Data.Shipment", b =>
            {
                b.HasOne("Marketplace.Data.Order", null)
                    .WithMany()
                    .HasForeignKey("OrderId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Marketplace.Data.Payment", b =>
            {
                b.HasOne("Marketplace.Data.Order", null)
                    .WithMany()
                    .HasForeignKey("OrderId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Marketplace.Data.Review", b =>
            {
                b.HasOne("Marketplace.Data.Product", null)
                    .WithMany()
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("Marketplace.Data.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

#pragma warning restore 612, 618
        }
    }
}